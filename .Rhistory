metavar="/path/to/output/dir")
parser <- add_option(parser, c("--jobid"), type="integer",
default="1",
help="Slurm array job id",
metavar="some integer N")
# main -------------------------------------------------------------------------
opt = if(TEST){
parse_args(parser,
args = c(
"--gtf=./data/gencode.v38.annotation.gtf",
"--bam=./data/45213600_visit1.markdup.sorted.bam"))
} else{
parse_args(parser)
}
# check cmd line arguments
x = foreach(
i = names(opt)
) %do% {
input_value=opt[[i]]
if(input_value==''){
stop(sprintf("ARGUMENT --%s IS REQUIRED",i))
}else if(i %in% c('dna','rna')){
if(!file.exists(input_value)){
stop(sprintf("FILE %s DOES NOT EXIST",input_value))
}
}
}
# llfs reads are unstranded, so no need to use stranded=TRUE
bins <- prepareBins(opt$gtf, stranded=FALSE)
# reading a single bam file
bamfiles <- c(opt$bam)
# strandSpecific=0 for unstranded data. GTF.attrType defines which feature level to groupby
rse <- countFeatures(bamfiles, bins, strandSpecific=0, isPairedEnd=TRUE,  GTF.featureType='exon', GTF.attrType='exon_id')
# output SE
saveRDS(rse, file=paste0(opt$output_prefix, "diffUTR_count_", opt$jobid, ".RDS"))
TEST = TRUE
parser <- OptionParser()
#parser <- add_option(parser, c("--test"), action="store_true",
#                     default=FALSE, help="Activate test run")
parser <- add_option(parser, c("--gtf"), type="character",
default="",
help="path to gtf file",
metavar="'/path/to/file.gtf'")
parser <- add_option(parser, c("--bam"), type="character",
default="",
help="path to bam file",
metavar="'/path/to/file.bam'")
parser <- add_option(parser, c("--output_prefix"), type="character",
default="./outputs/",
help="output location",
metavar="/path/to/output/dir")
parser <- add_option(parser, c("--jobid"), type="integer",
default="1",
help="Slurm array job id",
metavar="some integer N")
# main -------------------------------------------------------------------------
opt = if(TEST){
parse_args(parser,
args = c(
"--gtf=./data/gencode.v38.annotation.gtf",
"--bam=./data/10367282_visit_2.markdup.sorted.bam"))
} else{
parse_args(parser)
}
# check cmd line arguments
x = foreach(
i = names(opt)
) %do% {
input_value=opt[[i]]
if(input_value==''){
stop(sprintf("ARGUMENT --%s IS REQUIRED",i))
}else if(i %in% c('dna','rna')){
if(!file.exists(input_value)){
stop(sprintf("FILE %s DOES NOT EXIST",input_value))
}
}
}
# llfs reads are unstranded, so no need to use stranded=TRUE
bins <- prepareBins(opt$gtf, stranded=FALSE)
# reading a single bam file
bamfiles <- c(opt$bam)
# strandSpecific=0 for unstranded data. GTF.attrType defines which feature level to groupby
rse <- countFeatures(bamfiles, bins, strandSpecific=0, isPairedEnd=TRUE,  GTF.featureType='exon', GTF.attrType='exon_id')
# output SE
saveRDS(rse, file=paste0(opt$output_prefix, "diffUTR_count_", opt$jobid, ".RDS"))
#!/usr/bin/env Rscript
library(SummarizedExperiment)
library(optparse)
parser <- OptionParser()
#parser <- add_option(parser, c("--test"), action="store_true",
#                     default=FALSE, help="Activate test run")
parser <- add_option(parser, c("--input_prefix"), type="character",
default="./outputs/",
help="location of RDS files to combine",
metavar="/path/to/dir/with/RDSfiles")
parser <- add_option(parser, c("--output_prefix"), type="character",
default="./outputs/",
help="output location",
metavar="/path/to/output/dir")
# main -------------------------------------------------------------------------
opt = parse_args(parser)
filenames <- list.files(opt$input_prefix, pattern="*.RDS", full.names=TRUE)
combined_obj <- readRDS(filenames[1])
for (filename in filenames[c(2,length(filenames))]){
new_obj <- readRDS(filename)
combined_obj <- cbind(combined_obj, new_obj)
}
combined_obj
rowData(combined_obj)
combined_obj
assays(combined_obj)$counts
#!/usr/bin/env Rscript
library(SummarizedExperiment)
library(optparse)
parser <- OptionParser()
#parser <- add_option(parser, c("--test"), action="store_true",
#                     default=FALSE, help="Activate test run")
parser <- add_option(parser, c("--input_prefix"), type="character",
default="./outputs/",
help="location of RDS files to combine",
metavar="/path/to/dir/with/RDSfiles")
parser <- add_option(parser, c("--output_prefix"), type="character",
default="./outputs/",
help="output location",
metavar="/path/to/output/dir")
# main -------------------------------------------------------------------------
opt = parse_args(parser)
filenames <- list.files(opt$input_prefix, pattern="*.RDS", full.names=TRUE)
combined_obj <- readRDS(filenames[1])
combined_obj <- assays(combined_obj)$counts
for (filename in filenames[c(2,length(filenames))]){
print(filename)
new_obj <- readRDS(filename)
new_obj <- assays(new_obj)$counts
combined_obj <- cbind(combined_obj, new_obj)
}
combined_obj
head(combined_obj)
library(SummarizedExperiment)
inputpath = '/Users/test/projects/diffutr/outputs/combined/diffUTR_count_combined.RDS'
rds <- readRDS(inputpath)
rds
dim(rds)
head(rds)
c(2,4)
c(2:4)
library(SummarizedExperiment)
inputpath = '/Users/test/projects/diffutr/outputs/combined/diffUTR_count_combined.RDS'
rds <- readRDS(inputpath)
rds
rds
dim(rds)
dim(rows(rds))
head(rds[,1])
head(rds[,2500])
?rds
??rds
rds
rownames(rds)
colnames(rds)
rownames(rds)
colnames(rds)
phenotype_df <- read.csv(phenotypeDataPATH)
phenotypeDataPATH = '/Users/test/projects/diffutr/data/ADJUSTED_HEART_DISEASE_RELATED_TRAITS_FINAL_ROUND/adjusted_BMI.csv'
phenotype_df <- read.csv(phenotypeDataPATH)
dim(phenotype_df)
colnames(phenotype_df)
rownames(phenotype_df)
clear
phenotypeDataPATH = '/Users/test/projects/diffutr/data/ADJUSTED_HEART_DISEASE_RELATED_TRAITS_FINAL_ROUND/adjusted_fhshdl.csv'
phenotype_df <- read.csv(phenotypeDataPATH)
phenotype_df[,1]
rownames(phenotype_df)
phenotype_sampleIDs <- phenotype_df[,1]
phenotype_sampleIDs
length(phenotype_sampleIDs)
dim(phenotype_df)
colnames(rds)
library(tidyverse)
?str_extract
testSampleFileName = ".tmp.edwardkang_exoncount.S2TD1.31384457_visit2.markdup.sorted.bam"
str_extract(testSampleFileName,"^\\d+")
strsplit(testSampleFileName, '.')
strsplit(testSampleFileName, '.')
strsplit(testSampleFileName, split='.')
testSampleFileName
strsplit(testSampleFileName, split='_')
strsplit(testSampleFileName, split='.')
strsplit(testSampleFileName, split='[.]')
strsplit(testSampleFileName, split='[.]')[4]
strsplit(testSampleFileName, split='[.]')[[4]]
a <- strsplit(testSampleFileName, split='[.]')
a
dim(a)
length(a)
a[4]
a[[4]]
?strsplit
strsplit(testSampleFileName, split='[.]')[[1]][4]
a <- strsplit(testSampleFileName, split='[.]')[[1]][5]
a
sampleID_visitcode <- strsplit(testSampleFileName, split='[.]')[[1]][5]
sampleID_visitcode
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
sampleID
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d")
visitCode
allSampleIDs = c()
allVisitCodes = c()
for (bamfile in colnames(rds)){
# Hard coded based on the filename format of diffUTR runs on 2561 bamfiles.
sampleID_visitcode <- strsplit(testSampleFileName, split='[.]')[[1]][5]
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
allSampleIDs <- c(allSampleIDs, sampleID)
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d")
allVisitCodes <- c(allVisitCodes, visitCode)
}
allSampleIDs
allVisitCodes
unique(allVisitCodes)
colnames(rds)
colnames(rds)
allSampleIDs = c()
allVisitCodes = c()
for (bamfile in colnames(rds)){
# Hard coded based on the filename format of diffUTR runs on 2561 bamfiles.
sampleID_visitcode <- strsplit(bamfile, split='[.]')[[1]][5]
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
allSampleIDs <- c(allSampleIDs, sampleID)
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d")
allVisitCodes <- c(allVisitCodes, visitCode)
}
unique(allVisitCodes)
allSampleIDs = c()
allVisitCodes = c()
for (bamfile in colnames(rds)){
# Hard coded based on the filename format of diffUTR runs on 2561 bamfiles.
sampleID_visitcode <- strsplit(bamfile, split='[.]')[[1]][5]
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
allSampleIDs <- c(allSampleIDs, sampleID)
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d")
allVisitCodes <- c(allVisitCodes, visitCode)
if (is.na(visitCode)){
print(bamfile)
}
}
testBamName = ".tmp.edwardkang_exoncount.9g7BH.16810624_vist_3.markdup.sorted.bam"
strsplit(testBamName, split='[.]')[[1]][5]
str_extract(strsplit(testBamName, split='[.]')[[1]][5], '^\\d+')
str_extract(strsplit(testBamName, split='[.]')[[1]][5], "visit_\\d|visit\\d|vist\\d")
str_extract(strsplit(testBamName, split='[.]')[[1]][5], "visit_\\d|visit\\d|vist\\d|vist_\\d")
allSampleIDs = c()
allVisitCodes = c()
for (bamfile in colnames(rds)){
# Hard coded based on the filename format of diffUTR runs on 2561 bamfiles.
sampleID_visitcode <- strsplit(bamfile, split='[.]')[[1]][5]
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
allSampleIDs <- c(allSampleIDs, sampleID)
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d|vist_\\d")
allVisitCodes <- c(allVisitCodes, visitCode)
if (is.na(visitCode)){
print(bamfile)
}
}
testBamName = ".tmp.edwardkang_exoncount.dC1um.pool.3.h12.markdup.sorted.bam"
str_extract(strsplit(testBamName, split='[.]')[[1]][5], '^\\d+')
str_extract(strsplit(testBamName, split='[.]')[[1]][5], "visit_\\d|visit\\d|vist\\d|vist_\\d")
strsplit(testBamName, split='[.]')[[1]][5]
testBamName = ".tmp.edwardkang_exoncount.dC1um.pool.3.h12.markdup.sorted.bam"
'pool' %in% testBamName
?grepl
grepl(testBamName, 'pool', fixed=T)
testBamName
grepl('pool',testBamName, fixed=T)
allSampleIDs = c()
allVisitCodes = c()
for (bamfile in colnames(rds)){
# Hard coded based on the filename format of diffUTR runs on 2561 bamfiles
if (!grepl('pool',bamfile, fixed=T)){
sampleID_visitcode <- strsplit(bamfile, split='[.]')[[1]][5]
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
allSampleIDs <- c(allSampleIDs, sampleID)
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d|vist_\\d")
allVisitCodes <- c(allVisitCodes, visitCode)
if (is.na(visitCode)){
print(bamfile)
}
}
}
unique(allVisitCodes)
whatdatallPATH = '/Users/test/projects/diffutr/data/whatdatall.csv'
phenotype_df <- read.csv(phenotypeDataPATH)
whatdatall_df <- read.csv(whatdatallPATH)
head(whatdatall_df)
names(rds)
colnames(df)
colnames(rds)
exonCounts <- rds[, !grepl('pool', colnames(rds), fixed=T)]
exonCounts <- rds[, -which(grepl('pool', colnames(rds), fixed=T))]
?which
# first handle the colnames to separate out samples. (visit 1 or 2 + whether in phenotype data)
allSampleIDs = c()
allVisitCodes = c()
filesToDrop = c()
for (bamfile in colnames(rds)){
# Hard coded based on the filename format of diffUTR runs on 2561 bamfiles
if (!grepl('pool',bamfile, fixed=T)){ # remove differently formatted bamfiles from the downstream analysis
sampleID_visitcode <- strsplit(bamfile, split='[.]')[[1]][5]
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
allSampleIDs <- c(allSampleIDs, sampleID)
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d|vist_\\d")
allVisitCodes <- c(allVisitCodes, visitCode)
if (is.na(visitCode)){
print(bamfile)
}
}
else{
filesToDrop <- c(filesToDrop, bamfile)
}
}
# drop unwanted columns from rds
exonCounts <- rds[, !colnames(rds) %in% filesToDrop]
filesToDrop
usethis::edit_r_environ()
library(usethis)
library('usethis')
library(usethis)
# drop unwanted columns from rds
exonCounts <- rds[, -filesToDrop]
# drop unwanted columns from rds
exonCounts <- subset(rds, select=-c(filesToDrop))
filesToDrop
# drop unwanted columns from rds
exonCounts <- subset(rds, select=-filesToDrop)
exonCounts <- rds[!filesToDrop]
?subset
rds[,1]
'pool' %in% 'pool1'
'pool' %in% 'pool2'
rds_new <- rds %>% select(-contains('pool'))
library(dplyr)
rds_new <- rds %>% select(-contains('pool'))
?select
rds %>% select(contains('visit'))
rds[,filesToDrop]
rds[,(filesToDrop) := NULL]
rds[,!(filesToDrop)]
rds[,-filesToDrop]
rds[,-(filesToDrop)]
rds[,-c(filesToDrop)]
allSampleIDs = c()
allVisitCodes = c()
filesToDrop = c()
filesToKeep = c()
for (bamfile in colnames(rds)){
# Hard coded based on the filename format of diffUTR runs on 2561 bamfiles
if (!grepl('pool',bamfile, fixed=T)){ # remove differently formatted bamfiles from the downstream analysis
sampleID_visitcode <- strsplit(bamfile, split='[.]')[[1]][5]
sampleID <- str_extract(sampleID_visitcode, '^\\d+')
allSampleIDs <- c(allSampleIDs, sampleID)
visitCode <- str_extract(sampleID_visitcode, "visit_\\d|visit\\d|vist\\d|vist_\\d")
allVisitCodes <- c(allVisitCodes, visitCode)
filesToKeep <- c(filesToKeep, bamfile)
if (is.na(visitCode)){
print(bamfile)
}
}
else{
filesToDrop <- c(filesToDrop, bamfile)
}
}
rds[,filesToKeep]
library(SummarizedExperiment)
library(tidyverse)
library(dplyr)
library(diffUTR)
rds <- readRDS("outputs/exonExpression_hdl_preCovariatesAdj.RDS")
rds_preVST <- readRDS("/Users/test/projects/diffutr/outputs/exonExpression_hdl_preVST.RDS")
gtfPATH = "./data/gencode.v38.annotation.gtf"
bins <- prepareBins(gtfPATH, stranded=FALSE)
# Hot fix [reproduce the filter I used]
exp <- readRDS("outputs/exonExpression_hdl.RDS") # explore.R generates this file
exp_se <- SummarizedExperiment(assays=list(counts=exp),rowData=bins)
MinBinWidth <- 45 # it was chosen so that the number of the remaining bins < 1M
row_width_filter <- width(ranges(bins)) > MinBinWidth
exp_se <- exp_se[row_width_filter,]
maxAvgCount = 1000000
myRowMeans <- assays(exp_se)$counts %>% rowMeans(.)
row_excessive_filter <- myRowMeans < maxAvgCount
exp_se <- exp_se[row_excessive_filter,]
min_num_samples = floor(ncol(exp_se) * 0.015)
expression_level_filter <- rowSums(cpm(assays(exp_se)$counts > 3)) >= min_num_samples
library(edgeR)
expression_level_filter <- rowSums(cpm(assays(exp_se)$counts > 3)) >= min_num_samples
exp_se <- exp_se[expression_level_filter,]
bins <- bins[row_width_filter,]
bins <- bins[row_excessive_filter,]
bins <- bins[expression_level_filter,]
# append bin size as rowData
bin_width <- width(ranges(bins))
rowData(rds)[, 'binWidth'] <- bin_width
rowData(rds)[,'avgCount'] <- assays(rds)[[1]] %>% rowMeans(.)
# bin size vs average count across subjects
plot(rowData(rds)[, 'binWidth'],  rowData(rds)[,'avgCount'], xlab='binWidth', ylab='avgNormCount', main = "post VST")
# Compare with preVST version of counts
rowData(rds_preVST)[, 'binWidth'] <- bin_width
rowData(rds_preVST)[,'avgCount'] <- assays(rds_preVST)$counts %>% rowMeans(.)
plot(rowData(rds_preVST)[, 'binWidth'],  rowData(rds_preVST)[,'avgCount'], xlab='binWidth', ylab='avgCount', main="pre VST")
# log(binwidth)
plot(log(rowData(rds)[, 'binWidth']),  rowData(rds)[,'avgCount'], xlab='logBinWidth', ylab='avgNormCount', main = "log post VST")
bins
# histogram of bin width distribution after filtering.
hist(bin_width, main="binWidth")
hist(log(bin_width), main='logBinWidth')
# check the large bin sizes
which(bin_width > 4000000)
# check the large bin sizes
which(bin_width > 400000)
largeBins <- bin[which(bin_width > 400000),]
# check the large bin sizes
largeBins <- bins[which(bin_width > 400000),]
largeBins
length(largeBins)
rds
assays(rds)
assays(rds)[[1]]
counts <- assays(rds)[[1]]
counts[which(bin_width>400000),]
counts[which(bin_width>400000),] %>% rowMeans(.)
mean(counts %>% rowMeans(.))
?log
hist(log2(bin_width), main='logBinWidth')
plot(log2(rowData(rds)[, 'binWidth']),  rowData(rds)[,'avgCount'], xlab='logBinWidth', ylab='avgNormCount', main = "log post VST")
?log
getwd()
library(SummarizedExperiment)
#library(tidyverse)
library(dplyr)
library(diffUTR)
library(edgeR)
library(DESeq2)
gtfPATH = "./data/gencode.v38.annotation.gtf"
bins <- prepareBins(gtfPATH, stranded=FALSE)
bins
help("Grange")
class(bins)
saveRDS(bins, file="./outputs/diffUTR_bins_gencode_v38.RDS")
(results$x)$index
results$x[1,1]
(results$x)[1,1]
pcs <- results$x
results$x
results
hist(log2(width(ranges(bins))), main='logBinWidth')
sum(width(ranges(bins)))
ranges(bins)
min(bins$start)
min(ranges(bins)$start)
start(ranges(bins))
min(start(ranges(bins)))
max(end(ranges(bins)))
(max(end(ranges(bins))) - min(start(ranges(bins)))) - sum(width(ranges(bins)))
max(end(ranges(bins))) - sum(width(ranges(bins)))
end(ranges(bins))
ranges(bins)
sum(width(ranges(bins)))
100627108 - 56501353
?prepareBins
max(width(ranges(bins)))
min(start(ranges(bins)))
bins
getwd()
?countFeatures
library(diffUTR)
?countFeatures
?Rsubread::featureCounts
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("bacon")
BiocManager::install("GENESIS")
renv::snapshot()
library(GENESIS)
library(BACON)
library(bacon)
renv::snapshot()
library(tidyverse)
library(GENESIS)
library(SeqArray)
library(data.table)
library(kinship2)
library(dplyr)
library(tibble)
renv::snapshot()
library(bacon)
?bacon
renv::snapshot()
remove("tidyverse")
renv::remove("tidyverse")
renv::snapshot()
renv::install("dplyr")
renv::install("stringr")
renv::snapshot()
renv
?renv
renv --version
packageVersion("renv")
renv::status()
library(bacon)
library(bacon)
renv::install("lme4")
renv::snapshot()
library(lme4)
